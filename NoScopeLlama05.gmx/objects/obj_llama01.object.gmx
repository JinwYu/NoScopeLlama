<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_llama01Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game variables

// General variables.
midAir = 0;         // Equal to 1 if the player is mid air, 0 if on the ground.
time = 0;           // Keep track of a level's running time.
midAir = false;     // If the player is in the air.
offScreen = false;  // If the player is off screen.
spinning = false;   // If the player is spinning.

// Ability variables.
launchForce = 350;  // The force which the llama is launched with.
dashForce = 280;
freezeTime = 180;   // Freeze ability time, 3*60 = 180 frames = 3 seconds.
freezePaus = 100;   // Able to freeze after 90 frames.

// Highscore related variables.
difference = 0;     // Difference between level completed time and recommended time.
pointsBeforeTimeBonus = 0;
spitBonus = 500;
timeBonus = 500;
enemyBonus = 100;
spinningBonus = 20;
spinningTime = 0;
spinningTimeBonus = 20;
//nonPreferredAbilityBonus = 500; // If the wrong ability has been used to complete a level.
//abilityUsed[0] = "";    // Keep track of which abilities have been used.
//abilityUsed[1] = "";
//spinningBonusEarned = 0;
//abilityBonusEarned = 0;
//spitCountEarned = 0;


// Global variables. 
// These variables are put in the obj_floor object instead.
// Because there were problems with the "restart level" button in
// the transition room.
//global.roomCameFrom = room; // Room index.
//global.levelCameFrom = room; // The level's room index. Also needed because room index counts the menus as rooms too.

// Custom cursor
cursor_sprite = spr_cursor;
window_set_cursor(cr_none); // Don't draw the original mouse cursor.








// ________________ MISC CODE (Maybe useful later) _______________
///Initialize variables
/*
grav = 1;
spd = 4;
jspd = 20;
hspd = 0;
vspd = 0;
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spacekeyCounter alarm
midAir = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate physics after the freeze ability has been used.
with (obj_llama01){
    phy_active = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// All player and game code.
var spaceKey = keyboard_check_pressed(vk_space);
var escKey = keyboard_check_pressed(vk_escape);
var rbMouse = mouse_check_button_pressed(mb_right);
var dir = point_direction(x, y, mouse_x, mouse_y); // Get the mouse direction every step.


//                              GAMEPLAY
//___________________________________________________________________

// Launch the llama in the air depending on mouse direction.
if ( (midAir == 0) &amp;&amp; spaceKey){         
    // Apply the initial jump force.
    phy_linear_velocity_x = lengthdir_x(launchForce, dir);
    phy_linear_velocity_y = lengthdir_y(launchForce, dir);
        
    // Alarm needed to avoid conflict with the ability if statement.
    alarm[2] = 20;  // 20 frames delay.
} 

// Keep track of time.
if (midAir == 1){
    time += 1 / room_speed; // Seconds multiplied by frames.
}

// Change player sprite direction towards the mouse.
if x &lt; mouse_x{
    sprite_index = spr_llama01Right; // Face towards the mouse
}else{
    sprite_index = spr_llama01Left; 
}
//___________________________________________________________________



//                              ABILITIES
//___________________________________________________________________

if ( (midAir == 1) &amp;&amp; spaceKey){

    // AIR DASH
    
    if (obj_dashButton.clicked){
        phy_linear_velocity_x = lengthdir_x(dashForce, dir);
        phy_linear_velocity_y = lengthdir_y(dashForce, dir);
        //abilityUsed = 1;
    }
    
    // FREEZE
    
    if(obj_freezeButton.clicked){
        //abilityUsed = 2; 
        alarm[1] = freezeTime; // Execute code in alarm[1] after set time.
        with (obj_llama01){
            phy_active = false; // Player physics not active anymore.
        }    
    }   
    
    // BIG SPIT

    // BOMB SPIT

    // CURVED SPIT

    // DUMP  
    
    // TURBO FIRE
    
    /* // ÄNDRA ISTÄLLET HOLD MOUSE TO FIRE CRAZY LAZER
    if (obj_turboButton.clicked){
        obj_head.rateOfFire = 1;
    }
    */  

}

// 360 
if ( (midAir == 1) &amp;&amp; rbMouse){    
    physics_apply_torque(800000);   // Apply 800 000 Nm torque force.    
    spinning = true;
}
if (spinning){
    spinningTime += 1/room_speed;   // For highscore, counts every second that the player is spinning.
}





//                              GENERAL
//___________________________________________________________________

// Go to Pause menu.
if (escKey &amp;&amp; room != rm_transition){
    room_goto(rm_pause);
}

// Go to next level/room.
if (!instance_exists(obj_parentEnemy)){ 
 
    if (offScreen){
        scr_highscore_time();           // Award points depending on time. 
        scr_highscore_spit_counter();   // Award points if nr of spit equals nr of enemies.
        scr_highscore_spinning_time();  // Award points for how long the player has been spinning.
        //scr_highscore_ability();        // If the "wrong" ability was used.
        room_goto(rm_transition);
        scr_reset_variables();                      
    }
    if ( (midAir == 1) &amp;&amp; place_meeting(x, y, obj_floor)){
        scr_highscore_time();   
        scr_highscore_spit_counter();
        scr_highscore_spinning_time();
        //scr_highscore_ability();                      
        room_goto(rm_transition);
        scr_reset_variables();      
    }    
}

// If outside the room, restart level/room.
if (offScreen){
    room_restart();
    scr_reset_variables(); 
}

// Restart level/room if colliding with floor/platforms.
if ( (midAir == 1) &amp;&amp; place_meeting(x, y, obj_floor)){    

    if (instance_exists(obj_parentEnemy)){ // Restart if enemies are left.
        room_restart();
        scr_reset_variables(); 
    }
}
//___________________________________________________________________
    







//                              LLAMAS (Not implemented yet)
//___________________________________________________________________

// Invisible llama
// Big boned llama
// Robot llama
// No control llama (Randomised angle and stronger launchForce)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_startPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>offScreen = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
